# Based on https://github.com/NationalSecurityAgency/ghidra/files/8405335/vmx128.txt
# Category: VMX128 Vector Instructions

# version 1.0

define register offset=0x10000 size=4 [
	vr0 vr1 vr2 vr3 vr4 vr5 vr6 vr7 vr8 vr9 vr10 vr11 vr12 vr13 vr14 vr15 vr16 vr17 vr18 vr19 vr20 vr21 vr22 vr23 vr24 vr25 vr26 vr27 vr28 vr29 vr30 vr31
	vr32 vr33 vr34 vr35 vr36 vr37 vr38 vr39 vr40 vr41 vr42 vr43 vr44 vr45 vr46 vr47 vr48 vr49 vr50 vr51 vr52 vr53 vr54 vr55 vr56 vr57 vr58 vr59 vr60 vr61 vr62 vr63
	vr64 vr65 vr66 vr67 vr68 vr69 vr70 vr71 vr72 vr73 vr74 vr75 vr76 vr77 vr78 vr79 vr80 vr81 vr82 vr83 vr84 vr85 vr86 vr87 vr88 vr89 vr90 vr91 vr92 vr93 vr94 vr95
	vr96 vr97 vr98 vr99 vr100 vr101 vr102 vr103 vr104 vr105 vr106 vr107 vr108 vr109 vr110 vr111 vr112 vr113 vr114 vr115 vr116 vr117 vr118 vr119 vr120 vr121 vr122 vr123 vr124 vr125 vr126 vr127
];

define token vmx128_instr(32)
	opcode_00_01 = (0, 1)
	opcode_04_10 = (4, 10)
	opcode_26_31 = (26, 31)
	vdh_02_03 = (2, 3)
	vregD_21_25_00 = (21, 25)
	vregD_21_25_01 = (21, 25)
	vregD_21_25_10 = (21, 25)
	vregD_21_25_11 = (21, 25)
	regB_16_20 = (16, 20)
	regC_11_15 = (11, 15)
;

attach variables [ vregD_21_25_00 ]
    [ vr0 vr1 vr2 vr3 vr4 vr5 vr6 vr7 vr8 vr9 vr10 vr11 vr12 vr13 vr14 vr15 vr16 vr17 vr18 vr19 vr20 vr21 vr22 vr23 vr24 vr25 vr26 vr27 vr28 vr29 vr30 vr31 ];
attach variables [ vregD_21_25_01 ]
    [ vr32 vr33 vr34 vr35 vr36 vr37 vr38 vr39 vr40 vr41 vr42 vr43 vr44 vr45 vr46 vr47 vr48 vr49 vr50 vr51 vr52 vr53 vr54 vr55 vr56 vr57 vr58 vr59 vr60 vr61 vr62 vr63 ];
attach variables [ vregD_21_25_10 ]
    [ vr64 vr65 vr66 vr67 vr68 vr69 vr70 vr71 vr72 vr73 vr74 vr75 vr76 vr77 vr78 vr79 vr80 vr81 vr82 vr83 vr84 vr85 vr86 vr87 vr88 vr89 vr90 vr91 vr92 vr93 vr94 vr95 ];
attach variables [ vregD_21_25_11 ]
    [ vr96 vr97 vr98 vr99 vr100 vr101 vr102 vr103 vr104 vr105 vr106 vr107 vr108 vr109 vr110 vr111 vr112 vr113 vr114 vr115 vr116 vr117 vr118 vr119 vr120 vr121 vr122 vr123 vr124 vr125 vr126 vr127 ];

attach variables [ regB_16_20 regC_11_15 ]
    [ r0  r1  r2  r3  r4  r5  r6  r7  r8  r9  r10 r11 r12 r13 r14 r15
      r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 r30 r31 ];

vregD_21_25: vregD_21_25_00	is vregD_21_25_00 & vdh_02_03=0b00	{ export vregD_21_25_00; }
vregD_21_25: vregD_21_25_01	is vregD_21_25_01 & vdh_02_03=0b01	{ export vregD_21_25_01; }
vregD_21_25: vregD_21_25_10	is vregD_21_25_10 & vdh_02_03=0b10	{ export vregD_21_25_10; }
vregD_21_25: vregD_21_25_11	is vregD_21_25_11 & vdh_02_03=0b11	{ export vregD_21_25_11; }

# 000100AAAAABBBBBCCCCC0001000AA11
# lvewx128 vr0, r0, r0
:lvewx128 vregD_21_25, regB_16_20, regC_11_15 is opcode_26_31=0b000100 & regB_16_20 & regC_11_15 & opcode_04_10=0b0001000 & vregD_21_25 & opcode_00_01=0b11
{}

# 000100AAAAABBBBBCCCCC1000000AA11
# lvlx128 vr0, r0, r0
:lvlx128 vregD_21_25, regB_16_20, regC_11_15 is opcode_26_31=0b000100 & regB_16_20 & regC_11_15 & opcode_04_10=0b1000000 & vregD_21_25 & opcode_00_01=0b11
{}

# 000100AAAAABBBBBCCCCC1000100AA11
# lvrx128 vr0, r0, r0
:lvrx128 vregD_21_25, regB_16_20, regC_11_15 is opcode_26_31=0b000100 & regB_16_20 & regC_11_15 & opcode_04_10=0b1000100 & vregD_21_25 & opcode_00_01=0b11
{}

# 000100AAAAABBBBBCCCCC1100000AA11
# lvlxl128 vr0, r0, r0
:lvlxl128 vregD_21_25, regB_16_20, regC_11_15 is opcode_26_31=0b000100 & regB_16_20 & regC_11_15 & opcode_04_10=0b1100000 & vregD_21_25 & opcode_00_01=0b11
{}

# 000100AAAAABBBBBCCCCC1100100AA11
# lvrxl128 vr0, r0, r0
:lvrxl128 vregD_21_25, regB_16_20, regC_11_15 is opcode_26_31=0b000100 & regB_16_20 & regC_11_15 & opcode_04_10=0b1100100 & vregD_21_25 & opcode_00_01=0b11
{}

# 000100AAAAABBBBBCCCCC0000000AA11
# lvsl128 vr0, r0, r0
:lvsl128 vregD_21_25, regB_16_20, regC_11_15 is opcode_26_31=0b000100 & regB_16_20 & regC_11_15 & opcode_04_10=0b0000000 & vregD_21_25 & opcode_00_01=0b11
{}

# 000100AAAAABBBBBCCCCC0000100AA11
# lvsr128 vr0, r0, r0
:lvsr128 vregD_21_25, regB_16_20, regC_11_15 is opcode_26_31=0b000100 & regB_16_20 & regC_11_15 & opcode_04_10=0b0000100 & vregD_21_25 & opcode_00_01=0b11
{}

# 000100AAAAABBBBBCCCCC0001100AA11
# lvx128 vr0, r0, r0
:lvx128 vregD_21_25, regB_16_20, regC_11_15 is opcode_26_31=0b000100 & regB_16_20 & regC_11_15 & opcode_04_10=0b0001100 & vregD_21_25 & opcode_00_01=0b11
{}

# 000100AAAAABBBBBCCCCC0101100AA11
# lvxl128 vr0, r0, r0
:lvxl128 vregD_21_25, regB_16_20, regC_11_15 is opcode_26_31=0b000100 & regB_16_20 & regC_11_15 & opcode_04_10=0b0101100 & vregD_21_25 & opcode_00_01=0b11
{}

# 000100AAAAABBBBBCCCCC0110000AA11
# stewx128 vr0, r0, r0
:stewx128 vregD_21_25, regB_16_20, regC_11_15 is opcode_26_31=0b000100 & regB_16_20 & regC_11_15 & opcode_04_10=0b0110000 & vregD_21_25 & opcode_00_01=0b11
{}

# 000100AAAAABBBBBCCCCC1010000AA11
# stvlx128 vr0, r0, r0
:stvlx128 vregD_21_25, regB_16_20, regC_11_15 is opcode_26_31=0b000100 & regB_16_20 & regC_11_15 & opcode_04_10=0b1010000 & vregD_21_25 & opcode_00_01=0b11
{}

# 000100AAAAABBBBBCCCCC1110000AA11
# stvlxl128 vr0, r0, r0
:stvlxl128 vregD_21_25, regB_16_20, regC_11_15 is opcode_26_31=0b000100 & regB_16_20 & regC_11_15 & opcode_04_10=0b1110000 & vregD_21_25 & opcode_00_01=0b11
{}

# 000100AAAAABBBBBCCCCC1010100AA11
# stvrx128 vr0, r0, r0
:stvrx128 vregD_21_25, regB_16_20, regC_11_15 is opcode_26_31=0b000100 & regB_16_20 & regC_11_15 & opcode_04_10=0b1010100 & vregD_21_25 & opcode_00_01=0b11
{}

# 000100AAAAABBBBBCCCCC1110100AA11
# stvrxl128 vr0, r0, r0
:stvrxl128 vregD_21_25, regB_16_20, regC_11_15 is opcode_26_31=0b000100 & regB_16_20 & regC_11_15 & opcode_04_10=0b1110100 & vregD_21_25 & opcode_00_01=0b11
{}

# 000100AAAAABBBBBCCCCC0011100AA11
# stvx128 vr0, r0, r0
:stvx128 vregD_21_25, regB_16_20, regC_11_15 is opcode_26_31=0b000100 & regB_16_20 & regC_11_15 & opcode_04_10=0b0011100 & vregD_21_25 & opcode_00_01=0b11
{}

# 000100AAAAABBBBBCCCCC0111100AA11
# stvxl128 vr0, r0, r0
:stvxl128 vregD_21_25, regB_16_20, regC_11_15 is opcode_26_31=0b000100 & regB_16_20 & regC_11_15 & opcode_04_10=0b0111100 & vregD_21_25 & opcode_00_01=0b11
{}
